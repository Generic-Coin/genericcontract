{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _this2 = this,\n    _jsxFileName = \"/Users/joel/Projects/crypto/genericcoin/example/src/util/notifications.tsx\";\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Snackbar } from \"/Users/joel/Projects/crypto/genericcoin/src/index\";\n\nvar NotificationService = function () {\n  function NotificationService() {\n    var _this = this;\n\n    _classCallCheck(this, NotificationService);\n\n    this.send = function (notification) {\n      _this.notifications.push(notification);\n\n      _this.notify();\n    };\n\n    this.remove = function (notification) {\n      _this.notifications = _this.notifications.filter(function (n) {\n        return n !== notification;\n      });\n\n      _this.notify();\n    };\n\n    this.subscribe = function (callback) {\n      _this.subscribers.push(callback);\n    };\n\n    this.notify = function () {\n      _this.subscribers.forEach(function (callback) {\n        return callback(_this.notifications);\n      });\n    };\n\n    this.unsubscribe = function (callback) {\n      _this.subscribers = _this.subscribers.filter(function (cb) {\n        return cb !== callback;\n      });\n    };\n\n    this.notifications = [];\n    this.subscribers = [];\n  }\n\n  _createClass(NotificationService, [{\n    key: \"messages\",\n    get: function get() {\n      return this.notifications;\n    }\n  }]);\n\n  return NotificationService;\n}();\n\nexport var notificationService = new NotificationService();\nexport var NotificationProvider = function NotificationProvider() {\n  var _React$useState = React.useState(notificationService.messages),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      notifications = _React$useState2[0],\n      setNotifications = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onNotificationsAdded = function onNotificationsAdded(n) {\n      setNotifications(_toConsumableArray(n));\n    };\n\n    notificationService.subscribe(onNotificationsAdded);\n    return function () {\n      return notificationService.unsubscribe(onNotificationsAdded);\n    };\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    pointerEvents: \"box-none\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, notifications.map(function (notification, i) {\n    return React.createElement(Snackbar, {\n      key: i,\n      visible: true,\n      onDismiss: function onDismiss() {\n        return notificationService.remove(notification);\n      },\n      action: {\n        label: notification.closeButtonLabel || 'OK',\n        onPress: function onPress() {\n          return notificationService.remove(notification);\n        }\n      },\n      duration: 1000,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, notification.message);\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    flex: 1,\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["/Users/joel/Projects/crypto/genericcoin/example/src/util/notifications.tsx"],"names":["React","Snackbar","NotificationService","send","notification","notifications","push","notify","remove","filter","n","subscribe","callback","subscribers","forEach","unsubscribe","cb","notificationService","NotificationProvider","useState","messages","setNotifications","useEffect","onNotificationsAdded","styles","container","map","i","label","closeButtonLabel","onPress","message","StyleSheet","create","position","flex","top","left","right","bottom"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,QAAT;;IASMC,mB;AAKJ,iCAAc;AAAA;;AAAA;;AAAA,SASdC,IATc,GASP,UAACC,YAAD,EAAgC;AACrC,MAAA,KAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwBF,YAAxB;;AACA,MAAA,KAAI,CAACG,MAAL;AACD,KAZa;;AAAA,SAcdC,MAdc,GAcL,UAACJ,YAAD,EAAgC;AACvC,MAAA,KAAI,CAACC,aAAL,GAAqB,KAAI,CAACA,aAAL,CAAmBI,MAAnB,CAA0B,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKN,YAAV;AAAA,OAA3B,CAArB;;AACA,MAAA,KAAI,CAACG,MAAL;AACD,KAjBa;;AAAA,SAmBdI,SAnBc,GAmBF,UAACC,QAAD,EAAoC;AAC9C,MAAA,KAAI,CAACC,WAAL,CAAiBP,IAAjB,CAAsBM,QAAtB;AACD,KArBa;;AAAA,SAuBdL,MAvBc,GAuBL,YAAM;AACb,MAAA,KAAI,CAACM,WAAL,CAAiBC,OAAjB,CAAyB,UAAAF,QAAQ;AAAA,eAAIA,QAAQ,CAAC,KAAI,CAACP,aAAN,CAAZ;AAAA,OAAjC;AACD,KAzBa;;AAAA,SA2BdU,WA3Bc,GA2BA,UAACH,QAAD,EAAoC;AAChD,MAAA,KAAI,CAACC,WAAL,GAAmB,KAAI,CAACA,WAAL,CAAiBJ,MAAjB,CAAwB,UAAAO,EAAE;AAAA,eAAIA,EAAE,KAAKJ,QAAX;AAAA,OAA1B,CAAnB;AACD,KA7Ba;;AACZ,SAAKP,aAAL,GAAqB,EAArB;AACA,SAAKQ,WAAL,GAAmB,EAAnB;AACD;;;;wBAEc;AACb,aAAO,KAAKR,aAAZ;AACD;;;;;;AAyBH,OAAO,IAAMY,mBAAmB,GAAG,IAAIf,mBAAJ,EAA5B;AAEP,OAAO,IAAMgB,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAAA,wBACElB,KAAK,CAACmB,QAAN,CACxCF,mBAAmB,CAACG,QADoB,CADF;AAAA;AAAA,MACjCf,aADiC;AAAA,MAClBgB,gBADkB;;AAKxCrB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAM;AACpB,QAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACb,CAAD,EAAuB;AAClDW,MAAAA,gBAAgB,oBAAKX,CAAL,EAAhB;AACD,KAFD;;AAGAO,IAAAA,mBAAmB,CAACN,SAApB,CAA8BY,oBAA9B;AAEA,WAAO;AAAA,aAAMN,mBAAmB,CAACF,WAApB,CAAgCQ,oBAAhC,CAAN;AAAA,KAAP;AACD,GAPD,EAOG,EAPH;AASA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAA+B,IAAA,aAAa,EAAC,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,aAAa,CAACqB,GAAd,CAAkB,UAACtB,YAAD,EAAeuB,CAAf;AAAA,WACjB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,OAAO,MAFT;AAGE,MAAA,SAAS,EAAE;AAAA,eAAMV,mBAAmB,CAACT,MAApB,CAA2BJ,YAA3B,CAAN;AAAA,OAHb;AAIE,MAAA,MAAM,EAAE;AACNwB,QAAAA,KAAK,EAAExB,YAAY,CAACyB,gBAAb,IAAiC,IADlC;AAENC,QAAAA,OAAO,EAAE;AAAA,iBAAMb,mBAAmB,CAACT,MAApB,CAA2BJ,YAA3B,CAAN;AAAA;AAFH,OAJV;AAQE,MAAA,QAAQ,EAAE,IARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUGA,YAAY,CAAC2B,OAVhB,CADiB;AAAA,GAAlB,CADH,CADF;AAkBD,CAhCM;AAkCP,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,GAAG,EAAE,CAHI;AAITC,IAAAA,IAAI,EAAE,CAJG;AAKTC,IAAAA,KAAK,EAAE,CALE;AAMTC,IAAAA,MAAM,EAAE;AANC;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Snackbar } from 'react95-native';\n\ntype Notification = {\n  message: string;\n  closeButtonLabel?: string;\n};\n\ntype NotificationCallback = (data: Notification[]) => void;\n\nclass NotificationService {\n  public notifications: Notification[];\n\n  public subscribers: { (data: Notification[]): void }[];\n\n  constructor() {\n    this.notifications = [];\n    this.subscribers = [];\n  }\n\n  get messages() {\n    return this.notifications;\n  }\n\n  send = (notification: Notification) => {\n    this.notifications.push(notification);\n    this.notify();\n  };\n\n  remove = (notification: Notification) => {\n    this.notifications = this.notifications.filter(n => n !== notification);\n    this.notify();\n  };\n\n  subscribe = (callback: NotificationCallback) => {\n    this.subscribers.push(callback);\n  };\n\n  notify = () => {\n    this.subscribers.forEach(callback => callback(this.notifications));\n  };\n\n  unsubscribe = (callback: NotificationCallback) => {\n    this.subscribers = this.subscribers.filter(cb => cb !== callback);\n  };\n}\n\nexport const notificationService = new NotificationService();\n\nexport const NotificationProvider = () => {\n  const [notifications, setNotifications] = React.useState(\n    notificationService.messages,\n  );\n\n  React.useEffect(() => {\n    const onNotificationsAdded = (n: Notification[]) => {\n      setNotifications([...n]);\n    };\n    notificationService.subscribe(onNotificationsAdded);\n\n    return () => notificationService.unsubscribe(onNotificationsAdded);\n  }, []);\n\n  return (\n    <View style={styles.container} pointerEvents='box-none'>\n      {notifications.map((notification, i) => (\n        <Snackbar\n          key={i}\n          visible\n          onDismiss={() => notificationService.remove(notification)}\n          action={{\n            label: notification.closeButtonLabel || 'OK',\n            onPress: () => notificationService.remove(notification),\n          }}\n          duration={1000}\n        >\n          {notification.message}\n        </Snackbar>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    flex: 1,\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
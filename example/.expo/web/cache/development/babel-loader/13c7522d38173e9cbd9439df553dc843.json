{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/joel/Projects/crypto/genericv2/example/src/examples/ProgressExample.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Progress, Fieldset } from \"/Users/joel/Projects/crypto/genericv2/src/index\";\nimport ExamplePanel from \"../util/ExamplePanel\";\n\nvar DividerExample = function DividerExample() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      percent = _useState2[0],\n      setPercent = _useState2[1];\n\n  useEffect(function () {\n    var timer = setInterval(function () {\n      setPercent(function (previousPercent) {\n        if (previousPercent === 100) {\n          return 0;\n        }\n\n        var diff = Math.random() * 10;\n        return Math.min(previousPercent + diff, 100);\n      });\n    }, 500);\n    return function () {\n      clearInterval(timer);\n    };\n  }, []);\n  return React.createElement(ExamplePanel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, React.createElement(Fieldset, {\n    label: \"Default\",\n    style: [{\n      padding: 20\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, React.createElement(Progress, {\n    percent: percent,\n    background: \"canvas\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  })), React.createElement(Fieldset, {\n    label: \"Tile\",\n    style: [{\n      padding: 20\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, React.createElement(Progress, {\n    variant: \"tile\",\n    percent: percent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default DividerExample;","map":{"version":3,"sources":["/Users/joel/Projects/crypto/genericv2/example/src/examples/ProgressExample.tsx"],"names":["React","useState","useEffect","Progress","Fieldset","ExamplePanel","DividerExample","percent","setPercent","timer","setInterval","previousPercent","diff","Math","random","min","clearInterval","padding"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,QAAnB;AAEA,OAAOC,YAAP;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBACGL,QAAQ,CAAC,CAAD,CADX;AAAA;AAAA,MACpBM,OADoB;AAAA,MACXC,UADW;;AAG3BN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMO,KAAK,GAAGC,WAAW,CAAC,YAAM;AAC9BF,MAAAA,UAAU,CAAC,UAAAG,eAAe,EAAI;AAC5B,YAAIA,eAAe,KAAK,GAAxB,EAA6B;AAC3B,iBAAO,CAAP;AACD;;AACD,YAAMC,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,eAAOD,IAAI,CAACE,GAAL,CAASJ,eAAe,GAAGC,IAA3B,EAAiC,GAAjC,CAAP;AACD,OANS,CAAV;AAOD,KARwB,EAQtB,GARsB,CAAzB;AASA,WAAO,YAAM;AACXI,MAAAA,aAAa,CAACP,KAAD,CAAb;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAcA,SACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAA0B,IAAA,KAAK,EAAE,CAAC;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEV,OAAnB;AAA4B,IAAA,UAAU,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,MAAhB;AAAuB,IAAA,KAAK,EAAE,CAAC;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,OAAO,EAAEV,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF;AAUD,CA3BD;;AA6BA,eAAeD,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Progress, Fieldset } from 'react95-native';\n\nimport ExamplePanel from '../util/ExamplePanel';\n\nconst DividerExample = () => {\n  const [percent, setPercent] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setPercent(previousPercent => {\n        if (previousPercent === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(previousPercent + diff, 100);\n      });\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return (\n    <ExamplePanel>\n      <Fieldset label='Default' style={[{ padding: 20 }]}>\n        <Progress percent={percent} background='canvas' />\n      </Fieldset>\n      <Fieldset label='Tile' style={[{ padding: 20 }]}>\n        <Progress variant='tile' percent={percent} />\n      </Fieldset>\n    </ExamplePanel>\n  );\n};\n\nexport default DividerExample;\n"]},"metadata":{},"sourceType":"module"}
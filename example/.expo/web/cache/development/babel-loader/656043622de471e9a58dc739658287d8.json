{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\nimport { RECORDING_OPTIONS_PRESET_HIGH_QUALITY } from \"./Audio/RecordingConstants\";\n\nfunction getPermissionWithQueryAsync(name) {\n  var _await$navigator$perm, state;\n\n  return _regeneratorRuntime.async(function getPermissionWithQueryAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(!navigator || !navigator.permissions || !navigator.permissions.query)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(navigator.permissions.query({\n            name: name\n          }));\n\n        case 5:\n          _await$navigator$perm = _context.sent;\n          state = _await$navigator$perm.state;\n          _context.t0 = state;\n          _context.next = _context.t0 === 'granted' ? 10 : _context.t0 === 'denied' ? 11 : 12;\n          break;\n\n        case 10:\n          return _context.abrupt(\"return\", PermissionStatus.GRANTED);\n\n        case 11:\n          return _context.abrupt(\"return\", PermissionStatus.DENIED);\n\n        case 12:\n          return _context.abrupt(\"return\", PermissionStatus.UNDETERMINED);\n\n        case 13:\n          _context.next = 18;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t1 = _context[\"catch\"](2);\n          return _context.abrupt(\"return\", PermissionStatus.UNDETERMINED);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 15]], Promise);\n}\n\nfunction getUserMedia(constraints) {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n    var error = new Error('Permission unimplemented');\n    error.code = 0;\n    error.name = 'NotAllowedError';\n    throw error;\n  };\n\n  return new Promise(function (resolve, reject) {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n\n  var isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  var status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    shouldPlay: media.autoplay,\n    isPlaying: isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\n\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nvar mediaRecorder = null;\nvar mediaRecorderUptimeOfLastStartResume = 0;\nvar mediaRecorderDurationAlreadyRecorded = 0;\nvar mediaRecorderIsRecording = false;\n\nfunction getAudioRecorderDurationMillis() {\n  var duration = mediaRecorderDurationAlreadyRecorded;\n\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n\n  return duration;\n}\n\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n\n  getStatusForVideo: function getStatusForVideo(element) {\n    return _regeneratorRuntime.async(function getStatusForVideo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  loadForVideo: function loadForVideo(element, nativeSource, fullInitialStatus) {\n    return _regeneratorRuntime.async(function loadForVideo$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unloadForVideo: function unloadForVideo(element) {\n    return _regeneratorRuntime.async(function unloadForVideo$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setStatusForVideo: function setStatusForVideo(element, status) {\n    return _regeneratorRuntime.async(function setStatusForVideo$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  replayVideo: function replayVideo(element, status) {\n    return _regeneratorRuntime.async(function replayVideo$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setAudioMode: function setAudioMode() {\n    return _regeneratorRuntime.async(function setAudioMode$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setAudioIsEnabled: function setAudioIsEnabled() {\n    return _regeneratorRuntime.async(function setAudioIsEnabled$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getStatusForSound: function getStatusForSound(element) {\n    return _regeneratorRuntime.async(function getStatusForSound$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            return _context9.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  loadForSound: function loadForSound(nativeSource, fullInitialStatus) {\n    var source, media, status;\n    return _regeneratorRuntime.async(function loadForSound$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n            media = new Audio(source);\n\n            media.ontimeupdate = function () {\n              SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n                key: media,\n                status: getStatusFromMedia(media)\n              });\n            };\n\n            media.onerror = function () {\n              SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n                key: media,\n                error: media.error.message\n              });\n            };\n\n            status = setStatusForMedia(media, fullInitialStatus);\n            return _context10.abrupt(\"return\", [media, status]);\n\n          case 6:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unloadForSound: function unloadForSound(element) {\n    return _regeneratorRuntime.async(function unloadForSound$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            element.pause();\n            element.removeAttribute('src');\n            element.load();\n            return _context11.abrupt(\"return\", getStatusFromMedia(element));\n\n          case 4:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setStatusForSound: function setStatusForSound(element, status) {\n    return _regeneratorRuntime.async(function setStatusForSound$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            return _context12.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  replaySound: function replaySound(element, status) {\n    return _regeneratorRuntime.async(function replaySound$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            return _context13.abrupt(\"return\", setStatusForMedia(element, status));\n\n          case 1:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAudioRecordingStatus: function getAudioRecordingStatus() {\n    var _mediaRecorder, _mediaRecorder2, _mediaRecorder3;\n\n    return _regeneratorRuntime.async(function getAudioRecordingStatus$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            return _context14.abrupt(\"return\", {\n              canRecord: ((_mediaRecorder = mediaRecorder) == null ? void 0 : _mediaRecorder.state) === 'recording' || ((_mediaRecorder2 = mediaRecorder) == null ? void 0 : _mediaRecorder2.state) === 'inactive',\n              isRecording: ((_mediaRecorder3 = mediaRecorder) == null ? void 0 : _mediaRecorder3.state) === 'recording',\n              isDoneRecording: false,\n              durationMillis: getAudioRecorderDurationMillis(),\n              uri: null\n            });\n\n          case 1:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  prepareAudioRecorder: function prepareAudioRecorder(options) {\n    var stream, _await$this$getAudioR, uri, status;\n\n    return _regeneratorRuntime.async(function prepareAudioRecorder$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            if (!(typeof navigator !== 'undefined' && !navigator.mediaDevices)) {\n              _context15.next = 2;\n              break;\n            }\n\n            throw new Error('No media devices available');\n\n          case 2:\n            mediaRecorderUptimeOfLastStartResume = 0;\n            mediaRecorderDurationAlreadyRecorded = 0;\n            _context15.next = 6;\n            return _regeneratorRuntime.awrap(getUserMedia({\n              audio: true\n            }));\n\n          case 6:\n            stream = _context15.sent;\n            mediaRecorder = new window.MediaRecorder(stream, (options == null ? void 0 : options.web) || RECORDING_OPTIONS_PRESET_HIGH_QUALITY.web);\n            mediaRecorder.addEventListener('pause', function () {\n              mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n              mediaRecorderIsRecording = false;\n            });\n            mediaRecorder.addEventListener('resume', function () {\n              mediaRecorderUptimeOfLastStartResume = Date.now();\n              mediaRecorderIsRecording = true;\n            });\n            mediaRecorder.addEventListener('start', function () {\n              mediaRecorderUptimeOfLastStartResume = Date.now();\n              mediaRecorderDurationAlreadyRecorded = 0;\n              mediaRecorderIsRecording = true;\n            });\n            mediaRecorder.addEventListener('stop', function () {\n              mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n              mediaRecorderIsRecording = false;\n              stream.getTracks().forEach(function (track) {\n                return track.stop();\n              });\n            });\n            _context15.next = 14;\n            return _regeneratorRuntime.awrap(this.getAudioRecordingStatus());\n\n          case 14:\n            _await$this$getAudioR = _context15.sent;\n            uri = _await$this$getAudioR.uri;\n            status = _objectWithoutProperties(_await$this$getAudioR, [\"uri\"]);\n            return _context15.abrupt(\"return\", {\n              uri: null,\n              status: status\n            });\n\n          case 18:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  startAudioRecording: function startAudioRecording() {\n    return _regeneratorRuntime.async(function startAudioRecording$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (!(mediaRecorder === null)) {\n              _context16.next = 2;\n              break;\n            }\n\n            throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n\n          case 2:\n            if (mediaRecorder.state === 'paused') {\n              mediaRecorder.resume();\n            } else {\n              mediaRecorder.start();\n            }\n\n            return _context16.abrupt(\"return\", this.getAudioRecordingStatus());\n\n          case 4:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  pauseAudioRecording: function pauseAudioRecording() {\n    return _regeneratorRuntime.async(function pauseAudioRecording$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            if (!(mediaRecorder === null)) {\n              _context17.next = 2;\n              break;\n            }\n\n            throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n\n          case 2:\n            mediaRecorder.pause();\n            return _context17.abrupt(\"return\", this.getAudioRecordingStatus());\n\n          case 4:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  stopAudioRecording: function stopAudioRecording() {\n    var dataPromise, data, url;\n    return _regeneratorRuntime.async(function stopAudioRecording$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            if (!(mediaRecorder === null)) {\n              _context18.next = 2;\n              break;\n            }\n\n            throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n\n          case 2:\n            if (!(mediaRecorder.state === 'inactive')) {\n              _context18.next = 4;\n              break;\n            }\n\n            return _context18.abrupt(\"return\", this.getAudioRecordingStatus());\n\n          case 4:\n            dataPromise = new Promise(function (resolve) {\n              return mediaRecorder.addEventListener('dataavailable', function (e) {\n                return resolve(e.data);\n              });\n            });\n            mediaRecorder.stop();\n            _context18.next = 8;\n            return _regeneratorRuntime.awrap(dataPromise);\n\n          case 8:\n            data = _context18.sent;\n            url = URL.createObjectURL(data);\n            _context18.t0 = _objectSpread;\n            _context18.t1 = _objectSpread;\n            _context18.t2 = {};\n            _context18.next = 15;\n            return _regeneratorRuntime.awrap(this.getAudioRecordingStatus());\n\n          case 15:\n            _context18.t3 = _context18.sent;\n            _context18.t4 = (0, _context18.t1)(_context18.t2, _context18.t3);\n            _context18.t5 = {};\n            _context18.t6 = {\n              uri: url\n            };\n            return _context18.abrupt(\"return\", (0, _context18.t0)(_context18.t4, _context18.t5, _context18.t6));\n\n          case 20:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  unloadAudioRecorder: function unloadAudioRecorder() {\n    return _regeneratorRuntime.async(function unloadAudioRecorder$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            mediaRecorder = null;\n\n          case 1:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getPermissionsAsync: function getPermissionsAsync() {\n    var maybeStatus;\n    return _regeneratorRuntime.async(function getPermissionsAsync$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            _context20.next = 2;\n            return _regeneratorRuntime.awrap(getPermissionWithQueryAsync('microphone'));\n\n          case 2:\n            maybeStatus = _context20.sent;\n            _context20.t0 = maybeStatus;\n            _context20.next = _context20.t0 === PermissionStatus.GRANTED ? 6 : _context20.t0 === PermissionStatus.DENIED ? 7 : 8;\n            break;\n\n          case 6:\n            return _context20.abrupt(\"return\", {\n              status: PermissionStatus.GRANTED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: true\n            });\n\n          case 7:\n            return _context20.abrupt(\"return\", {\n              status: PermissionStatus.DENIED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: false\n            });\n\n          case 8:\n            _context20.next = 10;\n            return _regeneratorRuntime.awrap(this.requestPermissionsAsync());\n\n          case 10:\n            return _context20.abrupt(\"return\", _context20.sent);\n\n          case 11:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  requestPermissionsAsync: function requestPermissionsAsync() {\n    var stream;\n    return _regeneratorRuntime.async(function requestPermissionsAsync$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            _context21.prev = 0;\n            _context21.next = 3;\n            return _regeneratorRuntime.awrap(getUserMedia({\n              audio: true\n            }));\n\n          case 3:\n            stream = _context21.sent;\n            stream.getTracks().forEach(function (track) {\n              return track.stop();\n            });\n            return _context21.abrupt(\"return\", {\n              status: PermissionStatus.GRANTED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: true\n            });\n\n          case 8:\n            _context21.prev = 8;\n            _context21.t0 = _context21[\"catch\"](0);\n            return _context21.abrupt(\"return\", {\n              status: PermissionStatus.DENIED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: false\n            });\n\n          case 11:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExponentAV.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse, PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport type { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV.types';\nimport type { RecordingStatus } from './Audio/Recording.types';\nimport { RECORDING_OPTIONS_PRESET_HIGH_QUALITY } from './Audio/RecordingConstants';\n\nasync function getPermissionWithQueryAsync(\n  name: PermissionNameWithAdditionalValues\n): Promise<PermissionStatus | null> {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n\n  try {\n    const { state } = await navigator.permissions.query({ name });\n    switch (state) {\n      case 'granted':\n        return PermissionStatus.GRANTED;\n      case 'denied':\n        return PermissionStatus.DENIED;\n      default:\n        return PermissionStatus.UNDETERMINED;\n    }\n  } catch (error) {\n    // FireFox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n    return PermissionStatus.UNDETERMINED;\n  }\n}\n\nfunction getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n  // First get ahold of the legacy getUserMedia, if present\n  const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    function () {\n      const error: any = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): AVPlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: AVPlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(\n  media: HTMLMediaElement,\n  status: AVPlaybackStatusToSet\n): AVPlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nlet mediaRecorder: null | any /*MediaRecorder*/ = null;\nlet mediaRecorderUptimeOfLastStartResume: number = 0;\nlet mediaRecorderDurationAlreadyRecorded: number = 0;\nlet mediaRecorderIsRecording: boolean = false;\n\nfunction getAudioRecorderDurationMillis() {\n  let duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: AVPlaybackNativeSource,\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, AVPlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus(): Promise<RecordingStatus> {\n    return {\n      canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n      isRecording: mediaRecorder?.state === 'recording',\n      isDoneRecording: false,\n      durationMillis: getAudioRecorderDurationMillis(),\n      uri: null,\n    };\n  },\n  async prepareAudioRecorder(options): Promise<{\n    uri: string | null;\n    // status is of type RecordingStatus, but without the canRecord field populated\n    status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n  }> {\n    if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n      throw new Error('No media devices available');\n    }\n\n    mediaRecorderUptimeOfLastStartResume = 0;\n    mediaRecorderDurationAlreadyRecorded = 0;\n\n    const stream = await getUserMedia({ audio: true });\n\n    mediaRecorder = new (window as any).MediaRecorder(\n      stream,\n      options?.web || RECORDING_OPTIONS_PRESET_HIGH_QUALITY.web\n    );\n\n    mediaRecorder.addEventListener('pause', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n    });\n\n    mediaRecorder.addEventListener('resume', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('start', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderDurationAlreadyRecorded = 0;\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('stop', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n\n      // Clears recording icon in Chrome tab\n      stream.getTracks().forEach((track) => track.stop());\n    });\n\n    const { uri, ...status } = await this.getAudioRecordingStatus();\n\n    return { uri: null, status };\n  },\n  async startAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    } else {\n      mediaRecorder.start();\n    }\n\n    return this.getAudioRecordingStatus();\n  },\n  async pauseAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    // Set status to paused\n    mediaRecorder.pause();\n\n    return this.getAudioRecordingStatus();\n  },\n  async stopAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'inactive') {\n      return this.getAudioRecordingStatus();\n    }\n\n    const dataPromise = new Promise((resolve) =>\n      mediaRecorder.addEventListener('dataavailable', (e) => resolve(e.data))\n    );\n\n    mediaRecorder.stop();\n\n    const data = await dataPromise;\n    const url = URL.createObjectURL(data);\n\n    return {\n      ...(await this.getAudioRecordingStatus()),\n      uri: url,\n    };\n  },\n  async unloadAudioRecorder(): Promise<void> {\n    mediaRecorder = null;\n  },\n\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    const maybeStatus = await getPermissionWithQueryAsync('microphone');\n    switch (maybeStatus) {\n      case PermissionStatus.GRANTED:\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true,\n        };\n      case PermissionStatus.DENIED:\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false,\n        };\n      default:\n        return await this.requestPermissionsAsync();\n    }\n  },\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    try {\n      const stream = await getUserMedia({ audio: true });\n      stream.getTracks().forEach((track) => track.stop());\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: true,\n      };\n    } catch (e) {\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}